// <auto-generated /> // Copied from https://github.com/dotnet/runtime/raw/cf5b231fcbea483df3b081939b422adfb6fd486a/src/libraries/System.Memory/src/System/Buffers/SequenceReader.cs
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

#nullable enable

#if NETSTANDARD2_0

using System.Diagnostics;
using System.Runtime.CompilerServices;
using System;
using System.Buffers;
using System.Diagnostics.CodeAnalysis;

namespace System.Buffers;

static class ReadOnlySequencePolyfillExtensions
{
    /// <summary>
    /// Polyfill method used by the <see cref="SequenceReader{T}"/>.
    /// </summary>
    /// <typeparam name="T">The type of element kept by the sequence.</typeparam>
    /// <param name="sequence">The sequence to retrieve.</param>
    /// <param name="first">The first span in the sequence.</param>
    /// <param name="next">The next position.</param>
    public static void GetFirstSpan<T>(this ReadOnlySequence<T> sequence, out ReadOnlySpan<T> first, out SequencePosition next)
    {
        first = sequence.First.Span;
        next = sequence.GetPosition(first.Length);
    }
    
    const int FlagBitMask = 1 << 31;
    const int IndexBitMask = ~FlagBitMask;

    static int GetIndex(SequencePosition position) => position.GetInteger() & IndexBitMask; 
    
    static bool InRange(ulong value, ulong start, ulong end)
    {
        // _sequenceStart and _sequenceEnd must be well-formed
        Debug.Assert(start <= int.MaxValue);
        Debug.Assert(end <= int.MaxValue);
        Debug.Assert(start <= end);

        // The case, value > int.MaxValue, is invalid, and hence it shouldn't be in the range.
        // If value > int.MaxValue, it is invariably greater than both 'start' and 'end'.
        // In that case, the experession simplifies to value <= end, which will return false.

        // The case, value < start, is invalid.
        // In that case, (value - start) would underflow becoming larger than int.MaxValue.
        // (end - start) can never underflow and hence must be within 0 and int.MaxValue.
        // So, we will correctly return false.

        // The case, value > end, is invalid.
        // In that case, the expression simplifies to value <= end, which will return false.
        // This is because end > start & value > end implies value > start as well.

        // In all other cases, value is valid, and we return true.

        // Equivalent to: return (start <= value && value <= end)
        return (value - start) <= (end - start);
    }
    
    static void BoundsCheck<T>(ReadOnlySequence<T> sequence, in SequencePosition position, bool positionIsNotNull)
    {
        uint sliceStartIndex = (uint)position.GetInteger();

        object? startObject = sequence.Start.GetObject();
        object? endObject = sequence.End.GetObject();

        uint startIndex = (uint)GetIndex(sequence.Start);
        uint endIndex = (uint)GetIndex(sequence.End);

        // Single-Segment Sequence
        if (startObject == endObject)
        {
            if (!InRange(sliceStartIndex, startIndex, endIndex))
            {
                ThrowHelper.ThrowArgumentOutOfRangeException_PositionOutOfRange();
            }
        }
        else
        {
            // Multi-Segment Sequence
            // Storing this in a local since it is used twice within InRange()
            ulong startRange = (ulong)(((ReadOnlySequenceSegment<T>)startObject!).RunningIndex + startIndex);
            long runningIndex = 0;
            if (positionIsNotNull)
            {
                Debug.Assert(position.GetObject() != null);
                runningIndex = ((ReadOnlySequenceSegment<T>)position.GetObject()!).RunningIndex;
            }

            if (!InRange(
                    (ulong)(runningIndex + sliceStartIndex),
                    startRange,
                    (ulong)(((ReadOnlySequenceSegment<T>)endObject!).RunningIndex + endIndex)))
            {
                ThrowHelper.ThrowArgumentOutOfRangeException_PositionOutOfRange();
            }
        }
    }
    
    /// <summary>
    /// Returns the offset of a <paramref name="position" /> within this sequence from the start.
    /// </summary>
    /// <param name="position">The <see cref="System.SequencePosition"/> of which to get the offset.</param>
    /// <returns>The offset from the start of the sequence.</returns>
    /// <exception cref="System.ArgumentOutOfRangeException">The position is out of range.</exception>
    public static long GetOffset<T>(this ReadOnlySequence<T> sequence, SequencePosition position)
    {
        object? positionSequenceObject = position.GetObject();
        bool positionIsNull = positionSequenceObject == null;
        BoundsCheck(sequence, position, !positionIsNull);

        object? startObject = sequence.Start.GetObject();
        object? endObject = sequence.End.GetObject();

        
        
        uint positionIndex = (uint)GetIndex(position);

        // if sequence object is null we suppose start segment
        if (positionIsNull)
        {
            positionSequenceObject = startObject;
            positionIndex = (uint)GetIndex(position);
        }

        // Single-Segment Sequence
        if (startObject == endObject)
        {
            return positionIndex;
        }
        else
        {
            // Verify position validity, this is not covered by BoundsCheck for Multi-Segment Sequence
            // BoundsCheck for Multi-Segment Sequence check only validity inside current sequence but not for SequencePosition validity.
            // For single segment position bound check is implicit.
            Debug.Assert(positionSequenceObject != null);

            if (((ReadOnlySequenceSegment<T>)positionSequenceObject!).Memory.Length - positionIndex < 0)
                ThrowHelper.ThrowArgumentOutOfRangeException_PositionOutOfRange();

            // Multi-Segment Sequence
            ReadOnlySequenceSegment<T>? currentSegment = (ReadOnlySequenceSegment<T>?)startObject;
            while (currentSegment != null && currentSegment != positionSequenceObject)
            {
                currentSegment = currentSegment.Next!;
            }

            // Hit the end of the segments but didn't find the segment
            if (currentSegment is null)
            {
                ThrowHelper.ThrowArgumentOutOfRangeException_PositionOutOfRange();
            }

            Debug.Assert(currentSegment!.RunningIndex + positionIndex >= 0);

            return currentSegment!.RunningIndex + positionIndex;
        }
    }
}

static class ThrowHelper
{
    internal static void ThrowArgumentOutOfRangeException(string paramName) => throw new ArgumentOutOfRangeException(paramName);
    
    [DoesNotReturn]
    internal static void ThrowArgumentOutOfRangeException_PositionOutOfRange() { throw CreateArgumentOutOfRangeException_PositionOutOfRange(); }
    [MethodImpl(MethodImplOptions.NoInlining)]
    static Exception CreateArgumentOutOfRangeException_PositionOutOfRange() { return new ArgumentOutOfRangeException("position"); }

}

/// <summary>
/// Provides methods for reading binary and text data out of a <see cref="ReadOnlySequence{T}"/> with a focus on performance and minimal or zero heap allocations.
/// </summary>
/// <typeparam name="T">The type of element stored by the <see cref="ReadOnlySequence{T}"/>.</typeparam>
ref partial struct SequenceReader<T> where T : unmanaged, IEquatable<T>
{
    private SequencePosition _currentPosition;
    private SequencePosition _nextPosition;
    private bool _moreData;
    private readonly long _length;

    /// <summary>
    /// Create a <see cref="SequenceReader{T}"/> over the given <see cref="ReadOnlySequence{T}"/>.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public SequenceReader(ReadOnlySequence<T> sequence)
    {
        CurrentSpanIndex = 0;
        Consumed = 0;
        Sequence = sequence;
        _currentPosition = sequence.Start;
        _length = -1;

        sequence.GetFirstSpan(out ReadOnlySpan<T> first, out _nextPosition);
        CurrentSpan = first;
        _moreData = first.Length > 0;

        if (!_moreData && !sequence.IsSingleSegment)
        {
            _moreData = true;
            GetNextSpan();
        }
    }

    /// <summary>
    /// True when there is no more data in the <see cref="Sequence"/>.
    /// </summary>
    public readonly bool End => !_moreData;

    /// <summary>
    /// The underlying <see cref="ReadOnlySequence{T}"/> for the reader.
    /// </summary>
    public readonly ReadOnlySequence<T> Sequence { get; }

    /// <summary>
    /// The current position in the <see cref="Sequence"/>.
    /// </summary>
    public readonly SequencePosition Position
        => Sequence.GetPosition(CurrentSpanIndex, _currentPosition);

    /// <summary>
    /// The current segment in the <see cref="Sequence"/> as a span.
    /// </summary>
    public ReadOnlySpan<T> CurrentSpan { readonly get; private set; }

    /// <summary>
    /// The index in the <see cref="CurrentSpan"/>.
    /// </summary>
    public int CurrentSpanIndex { readonly get; private set; }

    /// <summary>
    /// The unread portion of the <see cref="CurrentSpan"/>.
    /// </summary>
    public readonly ReadOnlySpan<T> UnreadSpan
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => CurrentSpan.Slice(CurrentSpanIndex);
    }

    /// <summary>
    /// The total number of <typeparamref name="T"/>'s processed by the reader.
    /// </summary>
    public long Consumed { readonly get; private set; }

    /// <summary>
    /// Remaining <typeparamref name="T"/>'s in the reader's <see cref="Sequence"/>.
    /// </summary>
    public readonly long Remaining => Length - Consumed;

    /// <summary>
    /// Count of <typeparamref name="T"/> in the reader's <see cref="Sequence"/>.
    /// </summary>
    public readonly long Length
    {
        get
        {
            if (_length < 0)
            {
                // Cast-away readonly to initialize lazy field
                Unsafe.AsRef(_length) = Sequence.Length;
            }
            return _length;
        }
    }

    /// <summary>
    /// Peeks at the next value without advancing the reader.
    /// </summary>
    /// <param name="value">The next value or default if at the end.</param>
    /// <returns>False if at the end of the reader.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly bool TryPeek(out T value)
    {
        if (_moreData)
        {
            value = CurrentSpan[CurrentSpanIndex];
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    /// <summary>
    /// Read the next value and advance the reader.
    /// </summary>
    /// <param name="value">The next value or default if at the end.</param>
    /// <returns>False if at the end of the reader.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryRead(out T value)
    {
        if (End)
        {
            value = default;
            return false;
        }

        value = CurrentSpan[CurrentSpanIndex];
        CurrentSpanIndex++;
        Consumed++;

        if (CurrentSpanIndex >= CurrentSpan.Length)
        {
            GetNextSpan();
        }

        return true;
    }

    /// <summary>
    /// Move the reader back the specified number of items.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">
    /// Thrown if trying to rewind a negative amount or more than <see cref="Consumed"/>.
    /// </exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Rewind(long count)
    {
        if ((ulong)count > (ulong)Consumed)
        {
            ThrowHelper.ThrowArgumentOutOfRangeException(nameof(count));
        }

        Consumed -= count;

        if (CurrentSpanIndex >= count)
        {
            CurrentSpanIndex -= (int)count;
            _moreData = true;
        }
        else
        {
            // Current segment doesn't have enough data, scan backward through segments
            RetreatToPreviousSpan(Consumed);
        }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RetreatToPreviousSpan(long consumed)
    {
        ResetReader();
        Advance(consumed);
    }

    private void ResetReader()
    {
        CurrentSpanIndex = 0;
        Consumed = 0;
        _currentPosition = Sequence.Start;
        _nextPosition = _currentPosition;

        if (Sequence.TryGet(ref _nextPosition, out ReadOnlyMemory<T> memory, advance: true))
        {
            _moreData = true;

            if (memory.Length == 0)
            {
                CurrentSpan = default;
                // No data in the first span, move to one with data
                GetNextSpan();
            }
            else
            {
                CurrentSpan = memory.Span;
            }
        }
        else
        {
            // No data in any spans and at end of sequence
            _moreData = false;
            CurrentSpan = default;
        }
    }

    /// <summary>
    /// Get the next segment with available data, if any.
    /// </summary>
    private void GetNextSpan()
    {
        if (!Sequence.IsSingleSegment)
        {
            SequencePosition previousNextPosition = _nextPosition;
            while (Sequence.TryGet(ref _nextPosition, out ReadOnlyMemory<T> memory, advance: true))
            {
                _currentPosition = previousNextPosition;
                if (memory.Length > 0)
                {
                    CurrentSpan = memory.Span;
                    CurrentSpanIndex = 0;
                    return;
                }
                else
                {
                    CurrentSpan = default;
                    CurrentSpanIndex = 0;
                    previousNextPosition = _nextPosition;
                }
            }
        }
        _moreData = false;
    }

    /// <summary>
    /// Move the reader ahead the specified number of items.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Advance(long count)
    {
        const long TooBigOrNegative = unchecked((long)0xFFFFFFFF80000000);
        if ((count & TooBigOrNegative) == 0 && CurrentSpan.Length - CurrentSpanIndex > (int)count)
        {
            CurrentSpanIndex += (int)count;
            Consumed += count;
        }
        else
        {
            // Can't satisfy from the current span
            AdvanceToNextSpan(count);
        }
    }

    /// <summary>
    /// Unchecked helper to avoid unnecessary checks where you know count is valid.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal void AdvanceCurrentSpan(long count)
    {
        Debug.Assert(count >= 0);

        Consumed += count;
        CurrentSpanIndex += (int)count;
        if (CurrentSpanIndex >= CurrentSpan.Length)
            GetNextSpan();
    }

    /// <summary>
    /// Only call this helper if you know that you are advancing in the current span
    /// with valid count and there is no need to fetch the next one.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal void AdvanceWithinSpan(long count)
    {
        Debug.Assert(count >= 0);

        Consumed += count;
        CurrentSpanIndex += (int)count;

        Debug.Assert(CurrentSpanIndex < CurrentSpan.Length);
    }

    private void AdvanceToNextSpan(long count)
    {
        if (count < 0)
        {
            ThrowHelper.ThrowArgumentOutOfRangeException(nameof(count));
        }

        Consumed += count;
        while (_moreData)
        {
            int remaining = CurrentSpan.Length - CurrentSpanIndex;

            if (remaining > count)
            {
                CurrentSpanIndex += (int)count;
                count = 0;
                break;
            }

            // As there may not be any further segments we need to
            // push the current index to the end of the span.
            CurrentSpanIndex += remaining;
            count -= remaining;
            Debug.Assert(count >= 0);

            GetNextSpan();

            if (count == 0)
            {
                break;
            }
        }

        if (count != 0)
        {
            // Not enough data left- adjust for where we actually ended and throw
            Consumed -= count;
            ThrowHelper.ThrowArgumentOutOfRangeException(nameof(count));
        }
    }

    /// <summary>
    /// Copies data from the current <see cref="Position"/> to the given <paramref name="destination"/> span if there
    /// is enough data to fill it.
    /// </summary>
    /// <remarks>
    /// This API is used to copy a fixed amount of data out of the sequence if possible. It does not advance
    /// the reader. To look ahead for a specific stream of data <see cref="IsNext(ReadOnlySpan{T}, bool)"/> can be used.
    /// </remarks>
    /// <param name="destination">Destination span to copy to.</param>
    /// <returns>True if there is enough data to completely fill the <paramref name="destination"/> span.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly bool TryCopyTo(Span<T> destination)
    {
        // This API doesn't advance to facilitate conditional advancement based on the data returned.
        // We don't provide an advance option to allow easier utilizing of stack allocated destination spans.
        // (Because we can make this method readonly we can guarantee that we won't capture the span.)

        ReadOnlySpan<T> firstSpan = UnreadSpan;
        if (firstSpan.Length >= destination.Length)
        {
            firstSpan.Slice(0, destination.Length).CopyTo(destination);
            return true;
        }

        // Not enough in the current span to satisfy the request, fall through to the slow path
        return TryCopyMultisegment(destination);
    }

    internal readonly bool TryCopyMultisegment(Span<T> destination)
    {
        // If we don't have enough to fill the requested buffer, return false
        if (Remaining < destination.Length)
            return false;

        ReadOnlySpan<T> firstSpan = UnreadSpan;
        Debug.Assert(firstSpan.Length < destination.Length);
        firstSpan.CopyTo(destination);
        int copied = firstSpan.Length;

        SequencePosition next = _nextPosition;
        while (Sequence.TryGet(ref next, out ReadOnlyMemory<T> nextSegment, true))
        {
            if (nextSegment.Length > 0)
            {
                ReadOnlySpan<T> nextSpan = nextSegment.Span;
                int toCopy = Math.Min(nextSpan.Length, destination.Length - copied);
                nextSpan.Slice(0, toCopy).CopyTo(destination.Slice(copied));
                copied += toCopy;
                if (copied >= destination.Length)
                {
                    break;
                }
            }
        }

        return true;
    }
}

#else

using System.Buffers;
using System.Runtime.CompilerServices;

#pragma warning disable RS0026
#pragma warning disable RS0016
#pragma warning disable RS0041
[assembly: TypeForwardedTo(typeof(SequenceReader<>))]
#pragma warning restore RS0041
#pragma warning restore RS0016
#pragma warning restore RS0026

#endif
